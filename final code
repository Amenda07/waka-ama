#Program for wakaAama rank calcultaor
#Version one 
#Final date of completion 


import os
import csv
import subprocess
import platform
import tkinter as tk
from tkinter import messagebox, filedialog

#global dictionary to store the custom points 
custom_points = {1: 8, 2: 7, 3: 6, 4: 5, 5: 4, 6: 3, 7: 2, 8: 1}

# Points system function
def points_system(place):
    return custom_points.get(place, 1)

# Function to read a CSV file with different encodings to handle various file formats
def read_csv_file(file_path):
    encodings = ['utf-8', 'latin1', 'iso-8859-1']
    for enc in encodings:
        try:
            with open(file_path, 'r', encoding=enc) as f:
                reader = csv.reader(f)
                return list(reader)
        except UnicodeDecodeError:
            continue
    raise ValueError(f"Unable to read the file {file_path} with tried encodings.")

# Process a single file to calculate points for each regional association 
def process_single_file(file_path):
    rows = read_csv_file(file_path)
    regional_points = {}
    for row in rows[1:]:
        regional_association = row[5]
        place = row[0]
        if place not in ['DQ', 'DNS']: # Ignore disqualified or did-not-start participants
            points = points_system(int(place))
            regions = regional_association.split('/')  # Split regions in case of multiple associations 
            for region in regions:
                regional_points[region.strip()] = regional_points.get(region.strip(), 0) + points
    return regional_points

# Process all files in a directory and calculate total points for each regional association
def process_files_in_directory(directory):
    regional_points = {}
    for file in os.listdir(directory):
        if 'Final' in file: # Only process files containing 'Final' in their names 
            file_path = os.path.join(directory, file)
            print(f'Analysing file: {file_path}')
            try:
                file_points = process_single_file(file_path)
                for region, points in file_points.items():
                    regional_points[region] = regional_points.get(region, 0) + points
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")
    return regional_points

# Write the results to a CSV file
def write_results_to_csv(year, regional_points):
    # Define the name of the results file based on the year
    results_file = f'{year}_results.csv'
    
    # Open the results file in write mode with newline='' to avoid extra blank lines
    with open(results_file, 'w', newline='') as f:
        writer = csv.writer(f)
        
        # Write the title of the CSV file
        title = f"Waka Ama New Zealand Club Points Trophy - {year} Results"
        writer.writerow([title])
        writer.writerow([])  # Write an empty row for spacing
        writer.writerow(["Rank", "Regional Association", "Points"])  # Write the header row

        # Sort the regional points dictionary by points in descending order
        sorted_points = sorted(regional_points.items(), key=lambda item: item[1], reverse=True)
        
        rank = 1  # Initialize rank counter
        previous_points = None  # Track points of the previous entry to handle ties

        # Iterate through the sorted points and write each row to the CSV
        for idx, (association, points) in enumerate(sorted_points):
            # Update rank only if the current points are different from the previous points
            if points != previous_points:
                rank = idx + 1

            if rank == 0:  # Skip writing if rank is 0 (should not normally happen)
                continue

            # Write the rank, regional association, and points to the CSV
            writer.writerow([rank, association, points])
            previous_points = points  # Update previous points for the next iteration

    # Print a confirmation message and return the results file path
    print(f'Results written to {results_file}')
    return results_file

# Display results in a new window using Tkinter
def display_results(sorted_points, year):
    # Create a new top-level window for displaying the results
    top = tk.Toplevel(window)
    top.title(f"Results for {year}")
    top.geometry("400x400")

    # Create and pack a label with the title of the results
    label = tk.Label(top, text=f"Waka Ama New Zealand Club Points Trophy - {year} Results", font=("Helvetica", 16))
    label.pack(pady=10)

    # Create a frame to hold the text widget and scrollbar
    frame = tk.Frame(top)
    frame.pack(pady=10)

    # Create and pack a text widget for displaying the results
    text = tk.Text(frame, wrap="none", width=50, height=20)
    text.pack(side="left", fill="y")

    # Create and pack a scrollbar, and link it to the text widget
    scrollbar = tk.Scrollbar(frame, orient="vertical", command=text.yview)
    scrollbar.pack(side="right", fill="y")
    text.config(yscrollcommand=scrollbar.set)

    # Insert the header row and a separator line into the text widget
    text.insert("end", "Rank | Regional Association | Points\n")
    text.insert("end", "-" * 36 + "\n")

    # Initialize rank and previous_points for ranking logic
    rank = 1
    previous_points = None

    # Iterate through the sorted points and insert each entry into the text widget
    for idx, (association, points) in enumerate(sorted_points):
        if points != previous_points:
            rank = idx + 1
        text.insert("end", f"{rank} | {association} | {points}\n")
        previous_points = points

    # Make the text widget read-only
    text.config(state="disabled")

    # Create and pack an export button to export the results to a CSV file
    export_button = tk.Button(top, text="Export to CSV", command=lambda: export_results_to_csv(year, sorted_points))
    export_button.pack(pady=10)

# Export results to a CSV file and open it
def export_results_to_csv(year, sorted_points):
    regional_points = {association: points for rank, (association, points) in enumerate(sorted_points, 1)}
    results_file = write_results_to_csv(year, regional_points)
    open_results_file(results_file)

# Open the results CSV file with the default application
def open_results_file(results_file):
    if platform.system() == 'Darwin':  # macOS
        subprocess.call(('open', results_file))
    elif platform.system() == 'Windows':  # Windows
        os.startfile(results_file)
    else:  # Linux variants
        subprocess.call(('xdg-open', results_file))

# Process the files for a given year and directory
def process_files(year, directory):
    if not os.path.isdir(directory):
        print(f"The folder for the year {directory} does not exist.")
        return

    files = [file for file in os.listdir(directory) if 'Final' in file]
    print(f"Analysing folder: {directory}, Number of files: {len(files)}")

    loading_label.config(text=f"Processing year: {year}, Number of files: {len(files)}")
    window.update_idletasks()
    try:
        regional_points = process_files_in_directory(directory)
        if not regional_points:
            print("No points data processed.")
            loading_label.config(text="No points data processed.")
            return

        sorted_points = sorted(regional_points.items(), key=lambda item: item[1], reverse=True)

        # Display results before exporting to CSV
        display_results(sorted_points, year)
        loading_label.config(text="Processing complete.")
    except Exception as e:
        print(f"Error processing files: {e}")
        loading_label.config(text=f"Error: {e}")

# Validate the year input and start the processing
def process_input_year(entry):
    year = entry.get()
    if not year.isdigit() or int(year) > 2100 or int(year) < 2017:  
        messagebox.showerror("Invalid Input", "Please enter a valid year.")
        return
    else:
        directory = filedialog.askdirectory(title="Select Folder")
        if directory:
            process_files(year, directory)
        else:
            messagebox.showerror("No Folder Selected", "Please select a folder to process.")

# Show help instructions
def show_help():   
    for widget in window.winfo_children():
        widget.pack_forget()

    help_text = """
HELP/INSTRUCTIONS

The Waka Ama ranker is a program that reads the files
in the Waka Ama competitions database and processes
it to calculate the total number of points earned by each team.
According to the points collected they are ranked.
for example the team withh greatest points is ranked first position.

To find the results of the year required, type the year in the entry box.
Once you enter the year, click on the process files.
Then select the file with the data os the WakaAma games for the year you chose 
and process it.
A preview of the results will be displayed with a option to export to CSV.
 Click on the button provided at the bottom of window to export to CSV.


    """
    label_help = tk.Label(window, text=help_text, justify=tk.LEFT, bg="lightyellow")
    label_help.pack(pady=20, padx=20)

    button_return = tk.Button(window, text="Return", command=show_main_menu)
    button_return.pack(pady=20)

def show_main_menu():
    # Hide all widgets currently in the window
    for widget in window.winfo_children():
        widget.pack_forget()

    # Create and display a label prompting the user to enter a year
    label = tk.Label(window, text="Enter Year:")
    label.pack(pady=15)

    # Create and display a loading label (this will be updated during processing)
    global loading_label
    loading_label = tk.Label(window, text="", fg="blue")
    loading_label.pack(pady=5)

    # Create and display an entry widget for user input (year)
    entry = tk.Entry(window)
    entry.pack(pady=5, padx=10)

    # Create and display a button that processes the input year when clicked
    button_process = tk.Button(window, text="Process Files", command=lambda: process_input_year(entry))
    button_process.pack(pady=10)

    # Create and display a button that shows help or instructions when clicked
    button_help = tk.Button(window, text="Help/Instructions", command=show_help)
    button_help.pack(pady=10)

# Show settings to adjust points for each placement
def show_settings():
    # Create a new window for settings
    settings_window = tk.Toplevel(window)
    settings_window.title("Settings")
    settings_window.geometry("300x400")

    labels = {} # Dictionary to store label widgets
    entries = {} # Dictionary to store entry widgets

    # Create labels and entry fields for each place from 1 to 8
    for place in range(1, 9):
        labels[place] = tk.Label(settings_window, text=f"Points for place {place}:")
        labels[place].pack(pady=5)
        # Create and pack the label for each place, pre-filling it with current points
        entries[place] = tk.Entry(settings_window)
        entries[place].pack(pady=5)
        entries[place].insert(0, str(custom_points.get(place, 1)))

     # Function to save the settings
    def save_settings():
        # Iterate through each place from 1 to 8 and update the custom points dictionary
        for place in range(1, 9):
            try:
                # Try to convert the entry value to an integer and save it in the dictionary
                custom_points[place] = int(entries[place].get())
            except ValueError:
                # Show an error message if the entry is not a valid integer
                messagebox.showerror("Invalid Input", f"Please enter a valid integer for place {place}.")
                return
        # Close the settings window after saving
        settings_window.destroy()

    # Create and pack the save button, which calls the save_settings function when clicked
    save_button = tk.Button(settings_window, text="Save", command=save_settings)
    save_button.pack(pady=20)

# GUI window
# Initialize the main application window
window = tk.Tk()
window.title("Regional Points Calculator")  # Set the title of the window

# Call the function to display the main menu
show_main_menu()

# Enter the Tkinter event loop to keep the window open and responsive
window.mainloop()
