import tkinter as tk
from tkinter import messagebox
import csv
import os
import platform
import subprocess

# Points system function
def points_system(place):
    return {1: 8, 2: 7, 3: 6, 4: 5, 5: 4, 6: 3, 7: 2, 8: 1}.get(place, 0)

def read_csv_file(file_path):
    encodings = ['utf-8', 'latin1', 'iso-8859-1']
    for enc in encodings:
        try:
            with open(file_path, 'r', encoding=enc) as f:
                reader = csv.reader(f)
                return list(reader)  
        except UnicodeDecodeError:
            continue
    raise ValueError(f"Unable to read the file {file_path} with tried encodings.")

def process_single_file(file_path):
    rows = read_csv_file(file_path)
    regional_points = {}
    for row in rows:
        regional_association = row[5]
        place = row[2]
        if place not in ['DQ', 'DNS']:
            points = points_system(int(place))
            regional_points[regional_association] = regional_points.get(regional_association, 0) + points
    return regional_points

def process_files_in_directory(directory):
    regional_points = {}
    for file in os.listdir(directory):
        if 'Final' in file:
            file_path = os.path.join(directory, file)
            file_points = process_single_file(file_path)
            for region, points in file_points.items():
                regional_points[region] = regional_points.get(region, 0) + points
    return regional_points

def write_results_to_csv(year, regional_points):
    results_file = f'{year}_results.csv'
    with open(results_file, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["Regional association", "Points"])
        for association, points in sorted(regional_points.items(), key=lambda item: item[1], reverse=True):
            writer.writerow([association, points])
    return results_file


def open_results_file(results_file):
    if platform.system() == 'Darwin':  # macOS
        subprocess.call(('open', results_file))
    elif platform.system() == 'Windows':  # Windows
        os.startfile(results_file)
    else:  # Linux variants
        subprocess.call(('xdg-open', results_file))

def process_files(year, directory):
    if not os.path.isdir(directory):
        print(f"The folder for the year {directory} does not exist.")
        return

    print(f'Analysing folder: {directory}, Number of files: {len([file for file in os.listdir(directory) if "Final" in file])}')
    
    try:
        regional_points = process_files_in_directory(directory)
        if not regional_points:
            print("No points data processed.")
            return

        results_file = write_results_to_csv(year, regional_points)
        open_results_file(results_file)
    except Exception as e:
        print(f"Error processing files: {e}")

#process input year
def process_input_year(entry):
    year = entry.get() 
    if int(year) > 2100 or int(year) <2017:  
        messagebox.showerror("Invalid Input", "Please enter a valid year.")
        return
    else:
        print(f"Processing files for year {year}")


# help instructions
def show_help():   
    for widget in window.winfo_children():
        widget.pack_forget()

    help_text = """
HELP/INSTRUCTIONS

The Waka Ama ranker is a program that reads the files 
in the Waka Ama competitions database and processes 
it to calculate the total number of points earned by each team. 
Accoring to the points collected they are ranked. 
for example the team withh greatest points is ranked first position.

To find the results of the year required, type the year in the entry box. 
Once you enter the year, click on the process files. 
A CSV file for example, named 2017_results.csv (or the year you entered) is created. 
The CSV file is opened using the systems default application for CSV files.
Click on the return button to go back to the main window.
    
    """
    label_help = tk.Label(window, text=help_text, justify=tk.LEFT, bg="lightyellow")
    label_help.pack(pady=20, padx=20)
    

    button_return = tk.Button(window, text="Return", command=show_main_menu)
    button_return.pack(pady=20)

# main menu
def show_main_menu():
    for widget in window.winfo_children():
        widget.pack_forget()
        
    label = tk.Label(window, text="Enter Year:" )
    label.pack(pady=15)

    entry = tk.Entry(window)
    entry.pack(pady=5, padx=10)

    button_process = tk.Button(window, text="Process Files", command=lambda: process_input_year(entry))
    button_process.pack(pady=10)
    
    button_help = tk.Button(window, text="Help/Instructions", command=show_help)
    button_help.pack(pady=10)

# GUI window
window = tk.Tk()
window.title("Regional Points Calculator")

show_main_menu()
window.mainloop()


